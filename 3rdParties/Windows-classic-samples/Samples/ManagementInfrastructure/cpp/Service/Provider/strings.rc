//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
// PARTICULAR PURPOSE.
//
// Copyright (c) Microsoft Corporation. All rights reserved
//


/*
**==============================================================================
**
** WARNING: THIS FILE WAS AUTOMATICALLY GENERATED. PLEASE DO NOT EDIT.
** IF YOU NEED TO ADD RESOURCES, CREATE A SECOND .RC FILE, AND USE #INCLUDE TO MERGE THIS FILE
** INTO THE .RC FILE YOU CREATED.
**
**==============================================================================
*/
STRINGTABLE
{
    1, "InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following ""preferred"" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above ""preferred"" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the ""preferred"" algorithm must be used with the <OrgID> set to CIM."
    2, "The Caption property is a short textual description (one- line string) of the object."
    3, "The Description property provides a textual description of the object."
    4, "A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class."
    5, "2.19.0"
    6, "ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema."
    7, "A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed."
    8, "The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property."
    9, "Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n""Stressed"" indicates that the element is functioning, but needs attention. Examples of ""Stressed"" states are overload, overheated, and so on. \n""Predictive Failure"" indicates that an element is functioning nominally but predicting a failure in the near future. \n""In Service"" describes an element being configured, maintained, cleaned, or otherwise administered. \n""No Contact"" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n""Lost Communication"" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n""Stopped"" and ""Aborted"" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n""Dormant"" indicates that the element is inactive or quiesced. \n""Supporting Entity in Error"" indicates that this element might be ""OK"" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n""Completed"" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n""Power Mode"" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element."
    10, "Unknown"
    11, "Other"
    12, "OK"
    13, "Degraded"
    14, "Stressed"
    15, "Predictive Failure"
    16, "Error"
    17, "Non-Recoverable Error"
    18, "Starting"
    19, "Stopping"
    20, "Stopped"
    21, "In Service"
    22, "No Contact"
    23, "Lost Communication"
    24, "Aborted"
    25, "Dormant"
    26, "Supporting Entity in Error"
    27, "Completed"
    28, "Power Mode"
    29, "DMTF Reserved"
    30, "Vendor Reserved"
    31, "Strings describing the various OperationalStatus array values. For example, if ""Stopping"" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus."
    32, "A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus."
    33, "Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n""Non-recoverable Error"" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n""Critical Failure"" (25) - The element is non-functional and recovery might not be possible. \n""Major Failure"" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n""Minor Failure"" (15) - All functionality is available but some might be degraded. \n""Degraded/Warning"" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n""OK"" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n""Unknown"" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future."
    34, "Degraded/Warning"
    35, "Minor failure"
    36, "Major failure"
    37, "Critical failure"
    38, "Non-recoverable error"
    39, "CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n""Unknown"" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n""Not Available"" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n""Communication OK "" indicates communication is established with the element, but does not convey any quality of service. \n""No Contact"" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n""Lost Communication"" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable."
    40, "Not Available"
    41, "Communication OK"
    42, "DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n""Not Available"" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n""No Additional Information"" indicates that the element is functioning normally as indicated by PrimaryStatus = ""OK"". \n""Stressed"" indicates that the element is functioning, but needs attention. Examples of ""Stressed"" states are overload, overheated, and so on. \n""Predictive Failure"" indicates that an element is functioning normally but a failure is predicted in the near future. \n""Non-Recoverable Error "" indicates that this element is in an error condition that requires human intervention. \n""Supporting Entity in Error"" indicates that this element might be ""OK"" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems."
    43, "No Additional Information"
    44, "OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n""Unknown"" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n""None"" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n""Servicing"" describes an element being configured, maintained, cleaned, or otherwise administered. \n""Starting"" describes an element being initialized. \n""Stopping"" describes an element being brought to an orderly stop. \n""Stopped"" and ""Aborted"" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n""Dormant"" indicates that the element is inactive or quiesced. \n""Completed"" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n""Migrating"" element is being moved between host elements. \n""Immigrating"" element is being moved to new host element. \n""Emigrating"" element is being moved away from host element. \n""Shutting Down"" describes an element being brought to an abrupt stop. \n""In Test"" element is performing test functions. \n""Transitioning"" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n""In Service"" describes an element that is in service and operational."
    45, "Servicing"
    46, "Migrating"
    47, "Emigrating"
    48, "Immigrating"
    49, "Snapshotting"
    50, "Shutting Down"
    51, "In Test"
    52, "Transitioning"
    53, "PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. ""Unknown"" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n""OK"" indicates the ManagedElement is functioning normally. \n""Degraded"" indicates the ManagedElement is functioning below normal. \n""Error"" indicates the ManagedElement is in an Error condition."
    54, "CIM_ManagedSystemElement is the base class for the System Element hierarchy. Any distinguishable component of a System is a candidate for inclusion in this class. Examples of system components include: \n- software components such as application servers, databases, and applications \n- operating system components such as files, processes, and threads \n- device components such as disk drives, controllers, processors, and printers \n- physical components such as chips and cards."
    55, "2.22.0"
    56, "CIM_LogicalElement is a base class for all the components of a System that represent abstract system components, such as Files, Processes, or LogicalDevices."
    57, "2.6.0"
    58, "A free-form string that represents the status of the job. The primary status is reflected in the inherited OperationalStatus property. JobStatus provides additional, implementation-specific details."
    59, "The time that the Job was submitted to execute. A value of all zeroes indicates that the owning element is not capable of reporting a date and time. Therefore, the ScheduledStartTime and StartTime are reported as intervals relative to the time their values are requested."
    60, "The time that the current Job is scheduled to start. This time can be represented by the actual date and time, or an interval relative to the time that this property is requested. A value of all zeroes indicates that the Job is already executing. The property is deprecated in lieu of the more expressive scheduling properties, RunMonth, RunDay, RunDayOfWeek, and RunStartInterval."
    61, "The time that the Job was actually started. This time can be represented by an actual date and time, or by an interval relative to the time that this property is requested. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the \'last\' run time can be stored in this single-valued property."
    62, "The time interval that the Job has been executing or the total execution time if the Job is complete. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the \'last\' run time can be stored in this single-valued property."
    63, "The number of times that the Job should be run. A value of 1 indicates that the Job is not recurring, while any non-zero value indicates a limit to the number of times that the Job will recur. Zero indicates that there is no limit to the number of times that the Job can be processed, but that it is terminated either after the UntilTime or by manual intervention. By default, a Job is processed once."
    64, "The month during which the Job should be processed. Specify 0 for January, 1 for February, and so on."
    65, "January"
    66, "February"
    67, "March"
    68, "April"
    69, "May"
    70, "June"
    71, "July"
    72, "August"
    73, "September"
    74, "October"
    75, "November"
    76, "December"
    77, "The day in the month on which the Job should be processed. There are two different interpretations for this property, depending on the value of DayOfWeek. In one case, RunDay defines the day-in-month on which the Job is processed. This interpretation is used when the DayOfWeek is 0. A positive or negative integer indicates whether the RunDay should be calculated from the beginning or end of the month. For example, 5 indicates the fifth day in the RunMonth and -1 indicates the last day in the RunMonth. \n\nWhen RunDayOfWeek is not 0, RunDay is the day-in-month on which the Job is processed, defined in conjunction with RunDayOfWeek. For example, if RunDay is 15 and RunDayOfWeek is Saturday, then the Job is processed on the first Saturday on or after the 15th day in the RunMonth (for example, the third Saturday in the month). If RunDay is 20 and RunDayOfWeek is -Saturday, then this indicates the first Saturday on or before the 20th day in the RunMonth. If RunDay is -1 and RunDayOfWeek is -Sunday, then this indicates the last Sunday in the RunMonth."
    78, "A positive or negative integer used in conjunction with RunDay to indicate the day of the week on which the Job is processed. RunDayOfWeek is set to 0 to indicate an exact day of the month, such as March 1. A positive integer (representing Sunday, Monday, ..., Saturday) means that the day of week is found on or after the specified RunDay. A negative integer (representing -Sunday, -Monday, ..., -Saturday) means that the day of week is found on or BEFORE the RunDay."
    79, "-Saturday"
    80, "-Friday"
    81, "-Thursday"
    82, "-Wednesday"
    83, "-Tuesday"
    84, "-Monday"
    85, "-Sunday"
    86, "ExactDayOfMonth"
    87, "Sunday"
    88, "Monday"
    89, "Tuesday"
    90, "Wednesday"
    91, "Thursday"
    92, "Friday"
    93, "Saturday"
    94, "The time interval after midnight when the Job should be processed. For example, \n00000000020000.000000:000 \nindicates that the Job should be run on or after two o\'clock, local time or UTC time (distinguished using the LocalOrUtcTime property."
    95, "This property indicates whether the times represented in the RunStartInterval and UntilTime properties represent local times or UTC times. Time values are synchronized worldwide by using the enumeration value 2, ""UTC Time""."
    96, "Local Time"
    97, "UTC Time"
    98, "The time after which the Job is invalid or should be stopped. This time can be represented by an actual date and time, or by an interval relative to the time that this property is requested. A value of all nines indicates that the Job can run indefinitely."
    99, "The User who is to be notified upon the Job completion or failure."
    100, "The User that submitted the Job, or the Service or method name that caused the job to be created."
    101, "Indicates the urgency or importance of execution of the Job. The lower the number, the higher the priority. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the setting information that would influence the results of a job."
    102, "The percentage of the job that has completed at the time that this value is requested. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the \'last\' run data can be stored in this single-valued property. \nNote that the value 101 is undefined and will be not be allowed in the next major revision of the specification."
    103, "Percent"
    104, "Indicates whether or not the job should be automatically deleted upon completion. Note that the \'completion\' of a recurring job is defined by its JobRunTimes or UntilTime properties, or when the Job is terminated by manual intervention. If this property is set to false and the job completes, then the extrinsic method DeleteInstance must be used to delete the job instead of updating this property."
    105, "A vendor-specific error code. The value must be set to zero if the Job completed without error. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the \'last\' run error can be stored in this single-valued property."
    106, "A free-form string that contains the vendor error description. Note that this property is also present in the JobProcessingStatistics class. This class is necessary to capture the processing information for recurring Jobs, because only the \'last\' run error can be stored in this single-valued property."
    107, "Describes the recovery action to be taken for an unsuccessfully run Job. The possible values are: \n0 = ""Unknown"", meaning it is unknown as to what recovery action to take \n1 = ""Other"", indicating that the recovery action will be specified in the OtherRecoveryAction property \n2 = ""Do Not Continue"", meaning stop the execution of the job and appropriately update its status \n3 = ""Continue With Next Job"", meaning continue with the next job in the queue \n4 = ""Re-run Job"", indicating that the job should be re-run \n5 = ""Run Recovery Job"", meaning run the Job associated using the RecoveryJob relationship. Note that the recovery Job must already be in the queue from which it will run."
    108, "Do Not Continue"
    109, "Continue With Next Job"
    110, "Re-run Job"
    111, "Run Recovery Job"
    112, "A string describing the recovery action when the RecoveryAction property of the instance is 1 (""Other"")."
    113, "KillJob is being deprecated because there is no distinction made between an orderly shutdown and an immediate kill. CIM_ConcreteJob.RequestStateChange() provides \'Terminate\' and \'Kill\' options to allow this distinction. \nA method to kill this job and any underlying processes, and to remove any \'dangling\' associations."
    114, "Success"
    115, "Not Supported"
    116, "Timeout"
    117, "Failed"
    118, "Access Denied"
    119, "Not Found"
    120, "Vendor Specific"
    121, "Indicates whether or not the Job should be automatically deleted upon termination. This parameter takes precedence over the property, DeleteOnCompletion."
    122, "A Job is a LogicalElement that represents an executing unit of work, such as a script or a print job. A Job is distinct from a Process in that a Job can be scheduled or queued, and its execution is not limited to a single system."
    123, "2.10.0"
    124, "Primary classification of the error. The following values are defined: \n2 - Communications Error. Errors of this type are principally associated with the procedures and/or processes required to convey information from one point to another. \n3 - Quality of Service Error. Errors of this type are principally associated with failures that result in reduced functionality or performance. \n4 - Software Error. Error of this type are principally associated with a software or processing fault. \n5 - Hardware Error. Errors of this type are principally associated with an equipment or hardware failure. \n6 - Environmental Error. Errors of this type are principally associated with a failure condition relating the to facility, or other environmental considerations. \n7 - Security Error. Errors of this type are associated with security violations, detection of viruses, and similar issues. \n8 - Oversubscription Error. Errors of this type are principally associated with the failure to allocate sufficient resources to complete the operation. \n9 - Unavailable Resource Error. Errors of this type are principally associated with the failure to access a required resource. \n10 -Unsupported Operation Error. Errors of this type are principally associated with requests that are not supported."
    125, "Communications Error"
    126, "Quality of Service Error"
    127, "Software Error"
    128, "Hardware Error"
    129, "Environmental Error"
    130, "Security Error"
    131, "Oversubscription Error"
    132, "Unavailable Resource Error"
    133, "Unsupported Operation Error"
    134, "A free-form string describing the ErrorType when 1, ""Other"", is specified as the ErrorType."
    135, "A string that uniquely identifies the entity that owns the definition of the format of the Message described in this instance. OwningEntity MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity or standards body defining the format."
    136, "An opaque string that uniquely identifies, within the scope of the OwningEntity, the format of the Message."
    137, "The formatted message. This message is constructed by combining some or all of the dynamic elements specified in the MessageArguments property with the static elements uniquely identified by the MessageID in a message registry or other catalog associated with the OwningEntity."
    138, "An array containing the dynamic content of the message."
    139, "An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n0 - the Perceived Severity of the indication is unknown or indeterminate. \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n2 - Information should be used when providing an informative response. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Error is purely informational or its severity is simply unknown."
    140, "Information"
    141, "Minor"
    142, "Major"
    143, "Critical"
    144, "Fatal/NonRecoverable"
    145, "An enumerated value that describes the probable cause of the error."
    146, "Adapter/Card Error"
    147, "Application Subsystem Failure"
    148, "Bandwidth Reduced"
    149, "Connection Establishment Error"
    150, "Communications Protocol Error"
    151, "Communications Subsystem Failure"
    152, "Configuration/Customization Error"
    153, "Congestion"
    154, "Corrupt Data"
    155, "CPU Cycles Limit Exceeded"
    156, "Dataset/Modem Error"
    157, "Degraded Signal"
    158, "DTE-DCE Interface Error"
    159, "Enclosure Door Open"
    160, "Equipment Malfunction"
    161, "Excessive Vibration"
    162, "File Format Error"
    163, "Fire Detected"
    164, "Flood Detected"
    165, "Framing Error"
    166, "HVAC Problem"
    167, "Humidity Unacceptable"
    168, "I/O Device Error"
    169, "Input Device Error"
    170, "LAN Error"
    171, "Non-Toxic Leak Detected"
    172, "Local Node Transmission Error"
    173, "Loss of Frame"
    174, "Loss of Signal"
    175, "Material Supply Exhausted"
    176, "Multiplexer Problem"
    177, "Out of Memory"
    178, "Output Device Error"
    179, "Performance Degraded"
    180, "Power Problem"
    181, "Pressure Unacceptable"
    182, "Processor Problem (Internal Machine Error)"
    183, "Pump Failure"
    184, "Queue Size Exceeded"
    185, "Receive Failure"
    186, "Receiver Failure"
    187, "Remote Node Transmission Error"
    188, "Resource at or Nearing Capacity"
    189, "Response Time Excessive"
    190, "Retransmission Rate Excessive"
    191, "Software Program Abnormally Terminated"
    192, "Software Program Error (Incorrect Results)"
    193, "Storage Capacity Problem"
    194, "Temperature Unacceptable"
    195, "Threshold Crossed"
    196, "Timing Problem"
    197, "Toxic Leak Detected"
    198, "Transmit Failure"
    199, "Transmitter Failure"
    200, "Underlying Resource Unavailable"
    201, "Version Mismatch"
    202, "Previous Alert Cleared"
    203, "Login Attempts Failed"
    204, "Software Virus Detected"
    205, "Hardware Security Breached"
    206, "Denial of Service Detected"
    207, "Security Credential Mismatch"
    208, "Unauthorized Access"
    209, "Alarm Received"
    210, "Loss of Pointer"
    211, "Payload Mismatch"
    212, "Transmission Error"
    213, "Excessive Error Rate"
    214, "Trace Problem"
    215, "Element Unavailable"
    216, "Element Missing"
    217, "Loss of Multi Frame"
    218, "Broadcast Channel Failure"
    219, "Invalid Message Received"
    220, "Routing Failure"
    221, "Backplane Failure"
    222, "Identifier Duplication"
    223, "Protection Path Failure"
    224, "Sync Loss or Mismatch"
    225, "Terminal Problem"
    226, "Real Time Clock Failure"
    227, "Antenna Failure"
    228, "Battery Charging Failure"
    229, "Disk Failure"
    230, "Frequency Hopping Failure"
    231, "Loss of Redundancy"
    232, "Power Supply Failure"
    233, "Signal Quality Problem"
    234, "Battery Discharging"
    235, "Battery Failure"
    236, "Commercial Power Problem"
    237, "Fan Failure"
    238, "Engine Failure"
    239, "Sensor Failure"
    240, "Fuse Failure"
    241, "Generator Failure"
    242, "Low Battery"
    243, "Low Fuel"
    244, "Low Water"
    245, "Explosive Gas"
    246, "High Winds"
    247, "Ice Buildup"
    248, "Smoke"
    249, "Memory Mismatch"
    250, "Out of CPU Cycles"
    251, "Software Environment Problem"
    252, "Software Download Failure"
    253, "Element Reinitialized"
    254, "Logging Problems"
    255, "Leak Detected"
    256, "Protection Mechanism Failure"
    257, "Protecting Resource Failure"
    258, "Database Inconsistency"
    259, "Authentication Failure"
    260, "Breach of Confidentiality"
    261, "Cable Tamper"
    262, "Delayed Information"
    263, "Duplicate Information"
    264, "Information Missing"
    265, "Information Modification"
    266, "Information Out of Sequence"
    267, "Key Expired"
    268, "Non-Repudiation Failure"
    269, "Out of Hours Activity"
    270, "Out of Service"
    271, "Procedural Error"
    272, "Unexpected Information"
    273, "A free-form string describing the probable cause of the error."
    274, "A free-form string describing recommended actions to take to resolve the error."
    275, "The identifying information of the entity (i.e., the instance) generating the error. If this entity is modeled in the CIM Schema, this property contains the path of the instance encoded as a string parameter. If not modeled, the property contains some identifying string that names the entity that generated the error. The path or identifying string is formatted per the ErrorSourceFormat property."
    276, "The format of the ErrorSource property is interpretable based on the value of this property. Values are defined as: \n0 - Unknown. The format is unknown or not meaningfully interpretable by a CIM client application. \n1 - Other. The format is defined by the value of the OtherErrorSourceFormat property.2 - CIMObjectPath. A CIM Object Path as defined in the CIM Infrastructure specification. Note: CIM 2.5 and earlier used the term object names."
    277, "CIMObjectPath"
    278, "A string defining ""Other"" values for ErrorSourceFormat. This value MUST be set to a non NULL value when ErrorSourceFormat is set to a value of 1 (""Other""). For all other values of ErrorSourceFormat, the value of this string must be set to NULL."
    //279, "The CIM status code that characterizes this instance. \nThis property defines the status codes that MAY be return by a conforming CIM Server or Listener. Note that not all status codes are valid for each operation. The specification for each operation SHOULD define the status codes that may be returned by that operation. \nThe following values for CIM status code are defined: \n1 - CIM_ERR_FAILED. A general error occurred that is not covered by a more specific error code. \n2 - CIM_ERR_ACCESS_DENIED. Access to a CIM resource was not available to the client. \n3 - CIM_ERR_INVALID_NAMESPACE. The target namespace does not exist. \n4 - CIM_ERR_INVALID_PARAMETER. One or more parameter values passed to the method were invalid. \n5 - CIM_ERR_INVALID_CLASS. The specified Class does not exist. \n6 - CIM_ERR_NOT_FOUND. The requested object could not be found. \n7 - CIM_ERR_NOT_SUPPORTED. The requested operation is not supported. \n8 - CIM_ERR_CLASS_HAS_CHILDREN. Operation cannot be carried out on this class since it has instances. \n9 - CIM_ERR_CLASS_HAS_INSTANCES. Operation cannot be carried out on this class since it has instances. \n10 - CIM_ERR_INVALID_SUPERCLASS. Operation cannot be carried out since the specified superclass does not exist. \n11 - CIM_ERR_ALREADY_EXISTS. Operation cannot be carried out because an object already exists. \n12 - CIM_ERR_NO_SUCH_PROPERTY. The specified Property does not exist. \n13 - CIM_ERR_TYPE_MISMATCH. The value supplied is incompatible with the type. \n14 - CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED. The query language is not recognized or supported. \n15 - CIM_ERR_INVALID_QUERY. The query is not valid for the specified query language. \n16 - CIM_ERR_METHOD_NOT_AVAILABLE. The extrinsic Method could not be executed. \n17 - CIM_ERR_METHOD_NOT_FOUND. The specified extrinsic Method does not exist. \n18 - CIM_ERR_UNEXPECTED_RESPONSE. The returned response to the asynchronous operation was not expected. \n19 - CIM_ERR_INVALID_RESPONSE_DESTINATION. The specified destination for the asynchronous response is not valid. \n20 - CIM_ERR_NAMESPACE_NOT_EMPTY. The specified Namespace is not empty.\n21 - CIM_ERR_INVALID_ENUMERATION_CONTEXT. The enumeration context supplied is not valid.\n22 - CIM_ERR_INVALID_OPERATION_TIMEOUT. The specified Namespace is not empty.\n23 - CIM_ERR_PULL_HAS_BEEN_ABANDONED. The specified Namespace is not empty.\n24 - CIM_ERR_PULL_CANNOT_BE_ABANDONED. The attempt to abandon a pull operation has failed.\n25 - CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED. Filtered Enumeratrions are not supported.\n26 - CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED. Continue on error is not supported.\n27 - CIM_ERR_SERVER_LIMITS_EXCEEDED. The WBEM Server limits have been exceeded (e.g. memory, connections, ...).\n28 - CIM_ERR_SERVER_IS_SHUTTING_DOWN. The WBEM Server is shutting down.\n29 - CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED. The specified Query Feature is not supported."
    279, "The CIM status code that characterizes this instance. \nThis property defines the status codes that MAY be return by a conforming CIM Server or Listener. Note that not all status codes are valid for each operation. The specification for each operation SHOULD define the status codes that may be returned by that operation. \nThe following values for CIM status code are defined: \n1 - CIM_ERR_FAILED. A general error occurred that is not covered by a more specific error code."
    280, "CIM_ERR_FAILED"
    281, "CIM_ERR_ACCESS_DENIED"
    282, "CIM_ERR_INVALID_NAMESPACE"
    283, "CIM_ERR_INVALID_PARAMETER"
    284, "CIM_ERR_INVALID_CLASS"
    285, "CIM_ERR_NOT_FOUND"
    286, "CIM_ERR_NOT_SUPPORTED"
    287, "CIM_ERR_CLASS_HAS_CHILDREN"
    288, "CIM_ERR_CLASS_HAS_INSTANCES"
    289, "CIM_ERR_INVALID_SUPERCLASS"
    290, "CIM_ERR_ALREADY_EXISTS"
    291, "CIM_ERR_NO_SUCH_PROPERTY"
    292, "CIM_ERR_TYPE_MISMATCH"
    293, "CIM_ERR_QUERY_LANGUAGE_NOT_SUPPORTED"
    294, "CIM_ERR_INVALID_QUERY"
    295, "CIM_ERR_METHOD_NOT_AVAILABLE"
    296, "CIM_ERR_METHOD_NOT_FOUND"
    297, "CIM_ERR_UNEXPECTED_RESPONSE"
    298, "CIM_ERR_INVALID_RESPONSE_DESTINATION"
    299, "CIM_ERR_NAMESPACE_NOT_EMPTY"
    300, "CIM_ERR_INVALID_ENUMERATION_CONTEXT"
    301, "CIM_ERR_INVALID_OPERATION_TIMEOUT"
    302, "CIM_ERR_PULL_HAS_BEEN_ABANDONED"
    303, "CIM_ERR_PULL_CANNOT_BE_ABANDONED"
    304, "CIM_ERR_FILTERED_ENUMERATION_NOT_SUPPORTED"
    305, "CIM_ERR_CONTINUATION_ON_ERROR_NOT_SUPPORTED"
    306, "CIM_ERR_SERVER_LIMITS_EXCEEDED"
    307, "CIM_ERR_SERVER_IS_SHUTTING_DOWN"
    308, "CIM_ERR_QUERY_FEATURE_NOT_SUPPORTED"
    309, "A free-form string containing a human-readable description of CIMStatusCode. This description MAY extend, but MUST be consistent with, the definition of CIMStatusCode."
    310, "2.22.1"
    311, "CIM_Error is a specialized class that contains information about the severity, cause, recommended actions and other data related to the failure of a CIM Operation. Instances of this type MAY be included as part of the response to a CIM Operation."
    312, "Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> must include a copyrighted, trademarked or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID, or that is a registered ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity must assure that the resulting InstanceID is not re-used across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nFor DMTF defined instances, the \'preferred\' algorithm must be used with the <OrgID> set to \'CIM\'."
    313, "The user-friendly name for this instance of a Job. In addition, the user-friendly name can be used as a property for a search or query. (Note: Name does not have to be unique within a namespace.)"
    314, "JobState is an integer enumeration that indicates the operational state of a Job. It can also indicate transitions between these states, for example, \'Shutting Down\' and \'Starting\'. Following is a brief description of the states: \nNew (2) indicates that the job has never been started. \nStarting (3) indicates that the job is moving from the \'New\', \'Suspended\', or \'Service\' states into the \'Running\' state. \nRunning (4) indicates that the Job is running. \nSuspended (5) indicates that the Job is stopped, but can be restarted in a seamless manner. \nShutting Down (6) indicates that the job is moving to a \'Completed\', \'Terminated\', or \'Killed\' state. \nCompleted (7) indicates that the job has completed normally. \nTerminated (8) indicates that the job has been stopped by a \'Terminate\' state change request. The job and all its underlying processes are ended and can be restarted (this is job-specific) only as a new job. \nKilled (9) indicates that the job has been stopped by a \'Kill\' state change request. Underlying processes might have been left running, and cleanup might be required to free up resources. \nException (10) indicates that the Job is in an abnormal state that might be indicative of an error condition. Actual status might be displayed though job-specific objects. \nService (11) indicates that the Job is in a vendor-specific state that supports problem discovery, or resolution, or both.\nQuery pending (12) waiting for a client to resolve a query"
    315, "New"
    316, "Running"
    317, "Suspended"
    318, "Terminated"
    319, "Killed"
    320, "Exception"
    321, "Service"
    322, "Query Pending"
    323, "The date or time when the state of the Job last changed. If the state of the Job has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated."
    324, "The amount of time that the Job is retained after it has finished executing, either succeeding or failing in that execution. The job must remain in existence for some period of time regardless of the value of the DeleteOnCompletion property. \nThe default is five minutes."
    325, "Requests that the state of the job be changed to the value specified in the RequestedState parameter. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nIf 0 is returned, then the task completed successfully. Any other return code indicates an error condition."
    326, "Completed with No Error"
    327, "Unknown/Unspecified Error"
    328, "Can NOT complete within Timeout Period"
    329, "Invalid Parameter"
    330, "In Use"
    331, "Method Parameters Checked - Transition Started"
    332, "Invalid State Transition"
    333, "Use of Timeout Parameter Not Supported"
    334, "Busy"
    335, "Method Reserved"
    336, "RequestStateChange changes the state of a job. The possible values are as follows: \nStart (2) changes the state to \'Running\'. \nSuspend (3) stops the job temporarily. The intention is to subsequently restart the job with \'Start\'. It might be possible to enter the \'Service\' state while suspended. (This is job-specific.) \nTerminate (4) stops the job cleanly, saving data, preserving the state, and shutting down all underlying processes in an orderly manner. \nKill (5) terminates the job immediately with no requirement to save data or preserve the state. \nService (6) puts the job into a vendor-specific service state. It might be possible to restart the job."
    337, "Start"
    338, "Suspend"
    339, "Terminate"
    340, "Kill"
    341, "A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' must be returned."
    342, "When the job is executing or has terminated without error, then this method returns no CIM_Error instance. However, if the job has failed because of some internal problem or because the job has been terminated by a client, then a CIM_Error instance is returned."
    343, "Unspecified Error"
    344, "If the OperationalStatus on the Job is not ""OK"", then this method will return a CIM Error instance. Otherwise, when the Job is ""OK"", null is returned."
    345, "A concrete version of Job. This class represents a generic and instantiable unit of work, such as a batch or a print job."
    346, "EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued."
    347, "Enabled"
    348, "Disabled"
    349, "Not Applicable"
    350, "Enabled but Offline"
    351, "Deferred"
    352, "Quiesce"
    353, "A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 (""Other""). This property must be set to null when EnabledState is any value other than 1."
    354, "RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 (""Not Applicable""), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n""Unknown"" (0) indicates the last requested state for the element is unknown.\nNote that the value ""No Change"" (5) has been deprecated in lieu of indicating the last requested state is ""Unknown"" (0). If the last requested or desired state is unknown, RequestedState should have the value ""Unknown"" (0), but may have the value ""No Change"" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are ""Reboot"" (10) and ""Reset"" (11). Reboot refers to doing a ""Shut Down"" and then moving to an ""Enabled"" state. Reset indicates that the element is first ""Disabled"" and then ""Enabled"". The distinction between requesting ""Shut Down"" and ""Disabled"" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 ""Not Applicable""."
    355, "Shut Down"
    356, "No Change"
    357, "Offline"
    358, "Test"
    359, "Reboot"
    360, "Reset"
    361, "An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is ""Enabled"" (value=2)."
    362, "No Default"
    363, "The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated."
    364, "AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state."
    365, "Defer"
    366, "TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 ""No Change"" shall indicate that no transition is in progress.A value of 12 ""Not Applicable"" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning."
    367, "Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition."
    368, "Unknown or Unspecified Error"
    369, "Cannot complete within Timeout Period"
    370, "Method Parameters Checked - Job Started"
    371, "The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values."
    372, "May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation."
    373, "A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned."
    374, "This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a ServiceAccessPoint."
    375, "The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object."
    376, "The CreationClassName of the scoping System."
    377, "The Name of the scoping System."
    378, "CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified."
    379, "The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service."
    380, "A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on)."
    381, "Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request."
    382, "Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE)."
    383, "The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple ""start"" semantics are convenient to use."
    384, "The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple ""stop"" semantics are convenient to use."
    385, "A Service is a LogicalElement that represents the availability of functionality that can be managed. This functionality may be provided by a seperately modeled entity such as a LogicalDevice or a SoftwareFeature, or both. The modeled Service typically provides only functionality required for management of itself or the elements it affects."
    386, "2.14.0"
    387, "All"
    388, "This class demonstrates designing a WMI class to be exposed as a Cmdlet using the feature of steam output parameter, which allows provider to send output array element one by one back to client instead of sending the whole array back at one time."
    // Localized string used by service.dll
    500, "Are you sure you want start service '%1'?"
}
