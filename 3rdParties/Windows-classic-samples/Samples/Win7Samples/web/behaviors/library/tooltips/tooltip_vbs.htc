<!-- ---------------------------------------------------------------------
'
'  Copyright 1998 Microsoft Corporation.  All Rights Reserved.
'
'  File:         tooltip_vbs.htc
'
'  Description:  This behavior allows web authors to add tooltips to any
'                element on the page. Any HTML can be included in the 
'                tooltip, including images and CSS formatting. Web authors
'                can also control the placement and duration of the tooltip.
'
'-------------------------------------------------------------------- -->

<PROPERTY NAME="avoidMouse" />
<PROPERTY NAME="element"    />
<PROPERTY NAME="delay"      />
<PROPERTY NAME="duration"   />

<METHOD   NAME="HideTip"    />
<METHOD   NAME="ShowTip"    />

<EVENT    NAME="onshow"  ID="show"   />
<EVENT    NAME="onhide"  ID="hide"   />
<EVENT    NAME="onerror" ID="error"  />

<ATTACH   EVENT="ondocumentready" onevent="DoInit()" />


<SCRIPT LANGUAGE="VBScript">
'+----------------------------------------------------------------------------
'
'  Global Variables
'
'-----------------------------------------------------------------------------
quot = """"
dim bShowing       ' Tracks if the tooltip is showing

dim bOverTip       ' Tracks if the mouse is over the tooltip

dim iOffsetX        ' Tracks the left position to show the tooltip

dim iOffsetY        ' Tracks the top position to show the tooltip

dim oCurrTip        ' Tracks the element that is left to move over the tooltip

dim iOffsetW	    ' Tracks the width of the tooltip

dim iOffsetH        ' Tracks the height of the tooltip

dim oTipElem        ' Tracks the element property when AttachEvent is called.
                    '      This allows DetachEvent to undo the attached events
                    '      If the element property is changed at runtime.


'+----------------------------------------------------------------------------
'
'  Function:       DoInit
'
'  Description:    Calls functions to initialize behavior.  Attaches events
'                  that are not attached using the <ATTACH> element to prevent
'                  firing the events until the defaults are set and the
'                  behavior is initialized.
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DoInit()
	Set oCurrTip = Nothing
	Set oTipElem = Nothing

    SetDefaults() 
    AttachElement() 
    
    Call attachEvent("onmouseover", getRef("DoMouseOverTip")) 
    Call attachEvent("onmouseout", getRef("DoMouseOutTip"))    
    Call attachEvent("onpropertychange", getRef("DoPropChangeTip"))
end sub


'+----------------------------------------------------------------------------
'
'  Function:       SetDefaults
'
'  Description:    Called during the initialization of the behavior.  Sets
'                  the required settings for CSS properties and defaults for
'                  regular CSS properties (the NormalDefault() function), and
'                  attribute/properties.
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub SetDefaults()
    '  CSS hard-coded defaults (required settings)
    style.position = "absolute" 
    style.visibility = "hidden" 

    '  CSS Property Defaults   
    Call NormalDefault("fontSize",        "12",              "8pt") 
    Call NormalDefault("fontFamily",      "Times New Roman", "Arial") 
    Call NormalDefault("padding",         "0px",             "0 2 0 2") 
    Call NormalDefault("backgroundColor", "transparent",         "#ffffe7") 
    Call NormalDefault("borderStyle",     "none",            "solid") 
    Call NormalDefault("borderWidth",     "medium",          "1px") 
    Call NormalDefault("borderColor",     "#000000",         "black") 
    Call NormalDefault("color",           "#000000",         "black") 
    
    style.width = GetWidth()      ' Set the width by calling GetWidth()
    style.height = GetHeight()    ' Set the height by calling GetHeight()
    style.display = "none" 
    style.visibility = "visible" 

    iOffsetW = parseInt(style.width)
    iOffsetH = parseInt(style.height)

    '  Attribute | Property Defaults
    if (IsNull(avoidMouse)) then    avoidMouse  = false 
    if (IsNull(delay))      then    delay       = 500 
    if (IsNull(duration))   then    duration    = 10 
end sub


'+----------------------------------------------------------------------------
'
'  Function:       NormalDefault
'
'  Description:    Sets the defaults for CSS properties by checking the
'                  currentStyle and style of the object against the IE
'                  default.
'
'  Arguments:      sCSSName - the CSS name of the property
'                  sIEDefault - the IE standard default of the property
'                  sDefault - the desired default of the property
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub NormalDefault(sCSSName, sIEDefault, sDefault)
    if (currentStyle.getAttribute(sCSSName) = sIEDefault _
        AND (style.getAttribute(sCSSName) = "" OR style.getAttribute(sCSSName) = null)) then
        Call style.setAttribute(sCSSName, sDefault)
    end if
end sub


'+----------------------------------------------------------------------------
'
'  Function:       DoPropChangeTip
'
'  Description:    If the element
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DoPropChangeTip()
    propertyName = window.event.propertyName

    if (propertyName = "element") then
        DetachElement()
        AttachElement()
    end if
end sub


'+----------------------------------------------------------------------------
'
'  Function:       DoPropChangeElem
'
'  Description:    If the ALT or TITLE property of the element the tooltip is
'                  attached to are changed, this function prevents that change
'                  and fires the error event.
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DoPropChangeElem()
    propertyName = window.event.propertyName.toLowerCase()
    srcElement = window.event.srcElement

    if (propertyName = "title" OR propertyName = "alt") then
        '  Detach the propertychange event while the next steps are performed
        Call srcElement.detachEvent("onpropertychange", getRef("DoPropChangeElem"))
        
        '  Set ALT and TITLE to empty string
        srcElement.title = ""
        srcElement.alt = ""
        
        '  Fire error event with message
        ReturnError("The " & propertyName & " property is disabled " & _
            "when it is attached to the ToolTip behavior")
        
        '  Reattach the propertychange event.
        Call srcElement.attachEvent ("onpropertychange", getRef("DoPropChangeElem"))
    end if
end sub


'+----------------------------------------------------------------------------
'
'  Function:       GetHeight
'
'  Description:    This function helps set the height of the tooltip, either
'                  by grabbing the explicit value set on the page or by using
'                  the getBoundingClientRect() method.
'
'  Arguments:      none
'
'  Returns:        currentStyle.height if currentStyle.height is not equal to
'                      "auto" (which would likely signal it was not set by the
'                      html page).
'                  iHeight if currentStyle.height is equal to "auto".  iHeight
'                      is a value based on the getBoundingClientRect() method on
'                      the tooltip object.       
'
'-----------------------------------------------------------------------------

function GetHeight()
    if (currentStyle.height <> "auto") then
		GetHeight = currentStyle.height
    else
        Set oHeight = getBoundingClientRect()
        iHeight = oHeight.bottom - oHeight.top

        GetHeight = iHeight
    end if
end function


'+----------------------------------------------------------------------------
'
'  Function:       GetWidth
'
'  Description:    This function helps set the width of the tooltip, either
'                  by grabbing the explicit value set on the page or by using
'                  the getBoundingClientRect() method.
'
'  Arguments:      none
'
'  Returns:        currentStyle.width if currentStyle.width is not equal to
'                      "auto" (which would likely signal it was not set by the
'                      html page).
'                  iWidth if currentStyle.width is equal to "auto".  iWidth is
'                      a value based on the getBoundingClientRect() method on
'                      the tooltip object.
'
'-----------------------------------------------------------------------------

function GetWidth()
    if (currentStyle.width <> "auto") then
		GetWidth = currentStyle.width
    else
        Set oWidth = getBoundingClientRect()
        iWidth = oWidth.right - oWidth.left

        GetWidth = iWidth
    end if
end function


'+----------------------------------------------------------------------------
'
'  Function:       DetachElement
'
'  Description:    Un-Attaches the events attached by AttachEvent().  This
'                  function is called when the element property of the tooltip
'                  is changed, so that the old element no longer calls the
'                  tooltip.
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DetachElement()
	
    set oDetach = eval("window.document.all(" & quot & oTipElem & quot & ")" )
    
    if (oDetach.length <> null AND oDetach.length > 1) then
    
        for i = 0 to oDetach.length - 1
            Call oDetach(i).detachEvent("onmouseover", getRef("DoMouseOverElem"))
            Call oDetach(i).detachEvent("onmouseout", getRef("DoMouseOutElem"))
            Call oDetach(i).detachEvent("onpropertychange", getRef("DoPropChangeElem"))
        next
    
    
    else
    
        Call oDetach.detachEvent("onmouseover", getRef("DoMouseOverElem"))
        Call oDetach.detachEvent("onmouseout", getRef("DoMouseOutElem"))
        Call oDetach.detachEvent("onpropertychange", getRef("DoPropChangeElem"))
    end if
    
end sub


'+----------------------------------------------------------------------------
'
'  Function:       AttachElement
'
'  Description:    Attaches onmouseover, onmouseout, and onproperty change
'                  to the element the tooltip is assigned to (via the element
'                  property).  If the element is a collection, the members
'                  of the collection are enumerated.  If the element does
'                  not exist, an error is returned.
'
'  Arguments:      none
'
'  Returns:        false if the element does not exist
'
'-----------------------------------------------------------------------------

function AttachElement()
    '
    '  Set a variable equal to the object represented by the ID specified
    '  in the tooltip element.
    '
    on error resume next
    err.clear
    Set oAttach = eval("window.document.all(" & quot & element.element & quot & ")" )

    '  If the element does not exist, return an error
    if (err.number <> 0) then 
		on error goto 0
        ReturnError("Element specified in Tooltip is undefined")
        AttachElement = false
    else
		on error goto 0 
    
    '
    '  If the element is a collection (more than one element with the same
    '  ID), the events are attached to each member of the collection.
    '
		if Not oAttach Is Nothing then
			if IsArray(oAttach) then
				for i = 0 to oAttach.length - 1
					Call oAttach(i).attachEvent("onmouseover", getRef("DoMouseOverElem"))
					Call oAttach(i).attachEvent("onmouseout", getRef("DoMouseOutElem"))
					oAttach(i).title = ""
					if (LCase(oAttach(i).tagName) = "img") then oAttach(i).alt = ""
					Call oAttach(i).attachEvent("onpropertychange", getRef("DoPropChangeElem"))
				next
		'  Otherwise, the events are attached to the single element.
			Else
				Call oAttach.attachEvent("onmouseover", getRef("DoMouseOverElem"))
				Call oAttach.attachEvent("onmouseout", getRef("DoMouseOutElem"))
				oAttach.title = ""
				if (LCase(oAttach.tagName) = "img") then oAttach.alt = ""
				Call oAttach.attachEvent("onpropertychange", getRef("DoPropChangeElem"))
			end if
		End If
    
    '  Set the variable to track the element's ID
    oTipElem = element.element
   End If
end function


'+----------------------------------------------------------------------------
'
'  Function:       ShowTip
'
'  Description:    Method to show tooltip.
'
'  Arguments:      none
'
'  Returns:        false if bShowing is false (this prevents the ShowTip from
'                      repeatedly being called by mousing over the element
'                      and the tooltip).
'
'-----------------------------------------------------------------------------

function ShowTip()
    if (Not bShowing) then ShowTip = false

    Dim oBody
    Set oBody = window.document.body

    ' Set the horizontal position of the tooltip
    if (iOffsetX + iOffsetW > oBody.clientWidth) then
        style.left = oBody.clientWidth + oBody.scrollLeft - iOffsetW 
    else 
		style.left = iOffsetX + oBody.scrollLeft
	end if

    ' Set the vertical position of the tooltip
    if (iOffsetY + iOffsetH > oBody.offsetHeight) then
        style.top = oBody.clientHeight + oBody.scrollTop - iOffsetH
    else
		style.top = iOffsetY + oBody.scrollTop
	end if
    
    '  Make the tooltip visible
    style.display = "block"
    
    '  Fire the onshow event
    show.fire()
    
    '  Start the timer to turn off the tooltip (call HideTip())
    Call setTimeout(uniqueID & ".HideTip()", duration * 1000)

end function

'+----------------------------------------------------------------------------
'
'  Function:       HideTip
'
'  Description:    Method to hide tooltip.
'
'  Arguments:      none
'
'  Returns:        false if the user has moved from the element to the tooltip
'                      and the avoidMouse property is set to false.
'
'-----------------------------------------------------------------------------

Function HideTip()
    if (bOverTip AND (avoidMouse = "false" OR avoidMouse = false)) then HideTip = false

    bShowing = false
    
    '  Hide the tooltip
    style.display = "none"
    
    '  Fire the onhide event
    hide.fire()
End Function

'+----------------------------------------------------------------------------
'
'  Function:       DoMouseOverElem
'
'  Description:    Calls the ShowTip() methods after the delay period (set by
'                  the delay property) has expired.
'
'  Arguments:      none
'
'  Returns:        false if the mouse is returning from the tooltip
'
'-----------------------------------------------------------------------------
function DoMouseOverElem()

    '  If the mouse is coming back from the tooltip, return
    if (window.event.fromElement = element) then DoMouseOverElem = false

    '  Base the position of the tooltip on the position of the mouse
    iOffsetX = window.event.x - 10
    iOffsetY = window.event.y + 18
    
    '  Set tracking variable
    bShowing = true
    
    '  Call ShowTip() after delay
    
    if (delay <> -1) then Call setTimeout(uniqueID & ".ShowTip()", delay)
end function


'+----------------------------------------------------------------------------
'
'  Function:       DoMouseOutElem
'
'  Description:    Calls the HideTip() method after a 200ms delay (currently
'                  hard-coded).
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DoMouseOutElem()
    '  Call HideTip after a 200ms delay
    Call setTimeout(uniqueID & ".HideTip()", 200)
end sub


'+----------------------------------------------------------------------------
'
'  Function:       DoMouseOverTip
'
'  Description:    Sets the variable to track if the mouse is over the tooltip
'                  itself.  This assists in the process of allowing the user
'                  to mouse over the tooltip itself, in the case where it
'                  contains links, etc.  Note, this function is not called if
'                  the avoidMouse property is set to true.
'
'  Arguments:      none
'
'  Returns:        nothing
'
'-----------------------------------------------------------------------------

sub DoMouseOverTip()

    Set oCurrTip = window.event.fromElement    
    bOverTip = true
end sub


'+----------------------------------------------------------------------------
'
'  Function:       DoMouseOutTip
'
'  Description:    This function occurs on the mouseout event of the tooltip.
'                  When the user mouses out of the tooltip, the HideTip()
'                  method is called. As in the DoMouseOverTip() function above,
'                  this function is not called if the avoidMouse Property is 
'                  set to true.
'
'  Arguments:      none
'
'  Returns:        false if the srcElement is inside of the tooltip
'                  false if the mouse is returning to the tip element
'
'-----------------------------------------------------------------------------

function DoMouseOutTip()
    '
    '  If the element causing the mouseout is inside the tooltip container,
    '  don't hide the tooltip
    '
    if (element.contains(window.event.toElement)) then DoMouseOutTip = false
    
    '  If the mouse is returning to the tip element, don't hide the tooltip
    
    if (window.event.toElement Is oCurrTip) then
        bOverTip = false
        Set oCurrTip = Nothing
        DoMouseOut = false
    end if

    bOverTip = false
    HideTip()
end function


'+----------------------------------------------------------------------------
'
'  Function:       ReturnError
'
'  Description:    Fires the error event, along with a descriptive text
'                  message.
'
'  Arguments:      sMsg - descriptive text message
'
'  Returns:        nothing 
'
'-----------------------------------------------------------------------------

sub ReturnError(sMsg)
    dim oEvent
    Set oEvent = createEventObject()
    Call oEvent.setAttribute ("error", sMsg)
    error.fire(oEvent)
end sub


</SCRIPT>