// <Include>
///////////////////////////////////////////////////////////////////////////////
//
// THIS FILE IS AUTOMATICALLY GENERATED.  DO NOT MODIFY IT BY HAND.
//
///////////////////////////////////////////////////////////////////////////////
// </Include>

// <LiteralInclude>
#include <wsdapi.h>
// </LiteralInclude>

// <LiteralInclude>
#include "SimpleThermostat_WSD.h"
// </LiteralInclude>

// <LiteralInclude>
#include "SimpleThermostat_WSDTypes.h"
// </LiteralInclude>

// <NamespaceDefinitions>
//
// Namespace http://schemas.microsoft.com/windows/pnpx/2005/10
//
WSDXML_NAME Names_PnPX[] =
{   { &Namespace_PnPX, L"DeviceCategory" }
,   { &Namespace_PnPX, L"HardwareId" }
,   { &Namespace_PnPX, L"CompatibleId" }
};
 WSDXML_NAMESPACE Namespace_PnPX =
{   L"http://schemas.microsoft.com/windows/pnpx/2005/10"
,   L"pnpx"
,   &Names_PnPX[0]
,   3
,   0
};

//
// Namespace http://www.example.com/ncd/Thermostat
//
WSDXML_NAME Names_Thermostat[] =
{   { &Namespace_Thermostat, L"SimpleThermostat_WSD" }
,   { &Namespace_Thermostat, L"NoParameters" }
,   { &Namespace_Thermostat, L"OneInt" }
,   { &Namespace_Thermostat, L"GetCurrentTemp" }
,   { &Namespace_Thermostat, L"temp" }
,   { &Namespace_Thermostat, L"GetDesiredTemp" }
,   { &Namespace_Thermostat, L"SetDesiredTemp" }
};
 WSDXML_NAMESPACE Namespace_Thermostat =
{   L"http://www.example.com/ncd/Thermostat"
,   L"the"
,   &Names_Thermostat[0]
,   7
,   1
};

WSDXML_NAMESPACE* SimpleThermostat_WSDNamespaces[] =
{   &Namespace_PnPX
,   &Namespace_Thermostat
};

// </NamespaceDefinitions>

// <TypeTableDefinitions>
// </TypeTableDefinitions>

// <MessageTypeDefinitions>
//
// Port type http://www.example.com/ncd/Thermostat/SimpleThermostat_WSD
// Message type definitions
//
static BYTE RequestBodyType_GetCurrentTemp[] =
{   OpEndOfTable
};

WSDXML_TYPE REQUESTTYPE_GetCurrentTemp =
{   L"http://www.example.com/ncd/Thermostat/GetCurrentTemp"
,   RequestBodyType_GetCurrentTemp
};

static BYTE ResponseBodyType_GetCurrentTemp[] =
{   OpFormatPointerToStruct(RESPONSEBODY_SimpleThermostat_WSD_GetCurrentTemp)
,       OpBeginElement(THERMOSTAT_Temp)
,           OpFormatInt32(RESPONSEBODY_SimpleThermostat_WSD_GetCurrentTemp,temp,0)
,       OpEndElement
,   OpEndOfTable
};

WSDXML_TYPE RESPONSETYPE_GetCurrentTemp =
{   L"http://www.example.com/ncd/Thermostat/GetCurrentTemp"
,   ResponseBodyType_GetCurrentTemp
};

static BYTE RequestBodyType_GetDesiredTemp[] =
{   OpEndOfTable
};

WSDXML_TYPE REQUESTTYPE_GetDesiredTemp =
{   L"http://www.example.com/ncd/Thermostat/GetDesiredTemp"
,   RequestBodyType_GetDesiredTemp
};

static BYTE ResponseBodyType_GetDesiredTemp[] =
{   OpFormatPointerToStruct(RESPONSEBODY_SimpleThermostat_WSD_GetDesiredTemp)
,       OpBeginElement(THERMOSTAT_Temp)
,           OpFormatInt32(RESPONSEBODY_SimpleThermostat_WSD_GetDesiredTemp,temp,0)
,       OpEndElement
,   OpEndOfTable
};

WSDXML_TYPE RESPONSETYPE_GetDesiredTemp =
{   L"http://www.example.com/ncd/Thermostat/GetDesiredTemp"
,   ResponseBodyType_GetDesiredTemp
};

static BYTE RequestBodyType_SetDesiredTemp[] =
{   OpFormatPointerToStruct(REQUESTBODY_SimpleThermostat_WSD_SetDesiredTemp)
,       OpBeginElement(THERMOSTAT_Temp)
,           OpFormatInt32(REQUESTBODY_SimpleThermostat_WSD_SetDesiredTemp,temp,0)
,       OpEndElement
,   OpEndOfTable
};

WSDXML_TYPE REQUESTTYPE_SetDesiredTemp =
{   L"http://www.example.com/ncd/Thermostat/SetDesiredTemp"
,   RequestBodyType_SetDesiredTemp
};


// </MessageTypeDefinitions>

// <PortTypeDefinitions>
//
// Port type http://www.example.com/ncd/Thermostat/SimpleThermostat_WSD
//
WSD_OPERATION Operations_SimpleThermostat_WSD[] =
{   {   &REQUESTTYPE_GetCurrentTemp
    ,   &RESPONSETYPE_GetCurrentTemp
    ,   Stub_GetCurrentTemp
    }
,   {   &REQUESTTYPE_GetDesiredTemp
    ,   &RESPONSETYPE_GetDesiredTemp
    ,   Stub_GetDesiredTemp
    }
,   {   &REQUESTTYPE_SetDesiredTemp
    ,   NULL
    ,   Stub_SetDesiredTemp
    }
};

WSD_PORT_TYPE PortType_SimpleThermostat_WSD =
{   THERMOSTAT_SimpleThermostat_WSD
,   (sizeof(Operations_SimpleThermostat_WSD) / sizeof(Operations_SimpleThermostat_WSD[0]))
,   Operations_SimpleThermostat_WSD
,   WSD_PT_ALL
};

// </PortTypeDefinitions>

// <RelationshipMetadataDefinition>
static WSD_NAME_LIST serviceTypes_0[] =
{   {   NULL
    ,   &Names_Thermostat[0] 
    }
};

extern WSDXML_ELEMENT pnpxCompatibleId_0;

static WSDXML_TEXT pnpxCompatibleIdText_0 =
{   {   WSDXML_NODE.TextType
    ,   &pnpxCompatibleId_0
    ,   NULL
    }
,   L"PnPX_SimpleThermostat_CPID"
};

static WSDXML_ELEMENT pnpxCompatibleId_0 =
{   {   WSDXML_NODE.ElementType
    ,   NULL
    ,   NULL
    }
,   &Names_PnPX[2]
,   NULL
,   (WSDXML_NODE*)&pnpxCompatibleIdText_0
,   NULL
};

extern WSDXML_ELEMENT pnpxHardwareId_0;

static WSDXML_TEXT pnpxHardwareIdText_0 =
{   {   WSDXML_NODE.TextType
    ,   &pnpxHardwareId_0
    ,   NULL
    }
,   L"PnPX_SimpleThermostat_HWID"
};

static WSDXML_ELEMENT pnpxHardwareId_0 =
{   {   WSDXML_NODE.ElementType
    ,   NULL
    ,   (WSDXML_NODE*)&pnpxCompatibleId_0
    }
,   &Names_PnPX[1]
,   NULL
,   (WSDXML_NODE*)&pnpxHardwareIdText_0
,   NULL
};

static WSD_SERVICE_METADATA services_0[] =
{   {   NULL
    ,   &serviceTypes_0[0]
    ,   L"uri:MySimpleThermostat_WSDService"
    ,   &pnpxHardwareId_0
    }
};

static WSD_SERVICE_METADATA_LIST hostedServiceMetadataList_0[] =
{   {   NULL
    ,   &services_0[0]
    }
};

WSD_HOST_METADATA hostMetadata = 
{   
        NULL
    ,   hostedServiceMetadataList_0
};
// </RelationshipMetadataDefinition>

// <ThisModelMetadataDefinition>
static WSD_LOCALIZED_STRING modelNames[] =
{   {   NULL
    ,   L"WSD Simple Thermostat Device"
    }
};

static WSD_LOCALIZED_STRING_LIST modelNameList[] =
{   {   NULL
    ,   &modelNames[0]
    }
};

static WSD_LOCALIZED_STRING manufacturers[] =
{   {   NULL
    ,   L"Microsoft"
    }
};

static WSD_LOCALIZED_STRING_LIST manufacturerList[] =
{
    {   NULL
    ,   &manufacturers[0]
    },
};

extern WSDXML_ELEMENT pnpxDeviceCategory;

static WSDXML_TEXT pnpxDeviceCategoryText =
{   {   WSDXML_NODE.TextType
    ,   &pnpxDeviceCategory
    ,   NULL
    }
,   L"HomeAutomation.Thermostat"
};

static WSDXML_ELEMENT pnpxDeviceCategory =
{   {   WSDXML_NODE.ElementType
    ,   NULL
    ,   NULL
    }
,   &Names_PnPX[0]
,   NULL
,   (WSDXML_NODE*)&pnpxDeviceCategoryText
,   NULL
};
WSD_THIS_MODEL_METADATA thisModelMetadata =
{   manufacturerList
,   L"http://www.microsoft.com/"
,   modelNameList
,   L"1000"
,   L"http://www.example.com/SimpleThermostat1000"
,   NULL
,   &pnpxDeviceCategory // any
};
// </ThisModelMetadataDefinition>

